//SYSPJK1A JOB (SPJK,7583),'KAPLAN',NOTIFY=&SYSUID,
//         MSGCLASS=X,CLASS=F,REGION=7M,TIME=1440
//S EXEC ASMHCL,SYSOUT='*',PARM.L='MAP,LET,LIST'
//C.SYSIN DD *
ZIPPER   CSECT
ZIPPER   AMODE 31
ZIPPER   RMODE 24
         SYSSTATE ASCENV=P
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
         BAKR  RE,0 LINKAGE STACK
         LAE   RB,0(,RF)
         USING ZIPPER,RB,RC
         LAE   RC,4095(,RB)
         LAE   RC,1(,RC)
         LA    RD,SAVEAREA
         MVC   4(4,RD),=C'F1SA'
         L     R2,0(,R1) save parm ptr
         L     R0,=A(768*1024)
         LR    R1,R0
         STORAGE OBTAIN,LENGTH=((0),(1)),LOC=(BELOW,ANY)
         ST    R1,BUFFRBGN
         ST    R1,BUFFRPTR
         AL    R1,=A(512*1024) arbitrary loc for tempstor of dir info
         ST    R1,DIRPTR save dir temp stor ptr
         ST    R1,DIRSTOR save dir temp stor ptr
         LH    R3,0(,R2) passed parm len
         LTR   R3,R3 any parm passed
         BZ    NOPARM exit
         ST    R3,PATHNLEN store passed USS filename len
         BCTR  R3,0 save filename too
         EX    R3,MOVUSSFN ...
* encoded data is written to stream in reversed order
* Thus code X'71' (fixed huff x41=A) 01110001 --> 10001110
* this reversed code of 10001110 is written in bit chunks as
* thus if the current writing byte is ?????011 then written as
* 01110011 and then ?????100 where the next byte will fillin ?s
         LA    R2,HUFFLLEN ptr fixed huffman table to be built
         LA    R3,X'30' value starting point
         LA    R4,144 loop
HUFLOOP1 STC   R3,0(,R2) table
         LA    R2,1(,R2)
         LA    R3,1(,R3)
         BCT   R4,HUFLOOP1 ...
         LA    R3,X'90' value starting point
         LA    R4,112 loop
HUFLOOP2 STC   R3,0(,R2) table
         LA    R2,1(,R2)
         LA    R3,1(,R3)
         BCT   R4,HUFLOOP2 ...
         LA    R3,X'00' value starting point
         LA    R4,24 loop
HUFLOOP3 STC   R3,0(,R2) table
         LA    R2,1(,R2)
         LA    R3,1(,R3)
         BCT   R4,HUFLOOP3 ...
         LA    R3,X'C0' value starting point
         LA    R4,8 loop
HUFLOOP4 STC   R3,0(,R2) table
         LA    R2,1(,R2)
         LA    R3,1(,R3)
         BCT   R4,HUFLOOP4 ...
         LA    R2,HUFFLLEN ptr fixed huffman table to be built
         LA    R4,288 loop
HUFFREV0 LA    R3,8 bits to reverse
         LA    R1,128 left to right
         LA    RF,1 right to left
         XC    DWORD,DWORD use as workarea to reverse bits
HUFFREV1 EX    R1,HUFFTM is bit 0 or 1
         BZ    HUFFREV2 zero
         EX    RF,HUFFOI reverse bit 1
HUFFREV2 SRL   R1,1 test next bit
         SLL   RF,1 to set next bit
         BCT   R3,HUFFREV1 loop
         MVC   0(1,R2),DWORD fix up with reversed byte
         LA    R2,1(,R2) next byte to reverse
         BCT   R4,HUFFREV0
         OPEN  (INPUT,INPUT)
*OPEN (SNAPDCB,OUTPUT)
         XC    SERVRETV,SERVRETV
         XC    SERVRETC,SERVRETC
         XC    SERVREAS,SERVREAS
         CALL  BPX1OPN,(PATHNLEN,                                      X
               PATHNAME,                                               X
               FILEOPTN,                                               X
               FILEMODE,                                               X
               SERVRETV,                                               X
               SERVRETC,                                               X
               SERVREAS),                                              X
               VL
         ICM   RF,15,SERVRETV FD OR IF -1 THEN ERROR
         BM    FAIL
         ST    RF,FD SAVE FD
NEXTBLK  MVC   BUFFRPTR,BUFFRBGN
         MVC   BITCTR,=F'8' reset constant
         XC    BITBUCKT(16),BITBUCKT
         L     R2,BUFFRPTR
         XC    DWORD(32),DWORD clear
         XC    CURROFF,CURROFF
         XC    NEXTOFF,NEXTOFF
         XC    TOTALCHR,TOTALCHR
         L     RE,=A(BLNKDUPL) clear
         LR    R0,RE
         SLR   R1,R1
         L     RF,=A(258*4) len to clear
         MVCL  RE,R0 ...
         L     RE,=A(DASHDUPL) clear
         LR    R0,RE
         SLR   R1,R1
         L     RF,=A(258*4) len to clear
         MVCL  RE,R0 ...
         L     RE,=A(STARDUPL) clear
         LR    R0,RE
         SLR   R1,R1
         L     RF,=A(258*4) len to clear
         MVCL  RE,R0 ...
         L     RE,=A(EQULDUPL) clear
         LR    R0,RE
         SLR   R1,R1
         L     RF,=A(258*4) len to clear
         MVCL  RE,R0 ...
         L     RE,=A(ZERODUPL) clear
         LR    R0,RE
         SLR   R1,R1
         L     RF,=A(258*4) len to clear
         MVCL  RE,R0 ...
         L     RE,=A(HBARDUPL) clear
         LR    R0,RE
         SLR   R1,R1
         L     RF,=A(258*4) len to clear
         MVCL  RE,R0 ...
         TIME  DEC,DWORD,LINKAGE=SYSTEM,DATETYPE=YYYYMMDD
* pd time-hhmmssthmiju0000 date-yyyymmdd
         TR    DWORD(3),CNVBIN convert pd time to bin
         TR    DWORD+9(3),CNVBIN convert pd date to bin
         SLR   R0,R0
         IC    R0,DWORD hh
         SLL   R0,11
         SLR   R1,R1
         IC    R1,DWORD+1 mm
         SLL   R1,5
         SLR   RF,RF
         IC    RF,DWORD+2 ss
         SRL   RF,1 /2
         OR    R0,R1
         OR    R0,RF
         STCM  R0,2,FILETIME+1 INTEL reversed bytes order
         STCM  R0,1,FILETIME+0 ...
         SLR   R0,R0
         IC    R0,DWORD+9 yy
         AL    R0,=F'9' adjust year for zips
         SLL   R0,10
         SLR   R1,R1
         IC    R1,DWORD+10 mm
         SLL   R1,5
         SLR   RF,RF
         IC    RF,DWORD+11 dd
         OR    R0,R1
         OR    R0,RF
         STCM  R0,2,FILEDATE+1 INTEL reversed bytes order
         STCM  R0,1,FILEDATE+0 ...
         MVC   0(L'LOCLSIGN,R2),LOCLSIGN
         MVC   L'LOCLSIGN(LOCLFSIZ,R2),LOCLFHDR
         LA    R2,L'LOCLSIGN+LOCLFSIZ(,R2)
         ST    R2,FILENPTR save ptr to current filename
         MVC   0(5,R2),=c'block'
         SLR   RF,RF
         ICM   RF,3,CENTFCNT update total file count
         CVD   RF,DWORD
         LA    RF,1(,RF)
         STCM  RF,3,CENTFCNT
         STCM  RF,3,CENTFCN2
         UNPK  5(7,R2),DWORD+4(4)
         OI    11(R2),C'0'
         TR    0(12,R2),X0378859
         MVCIN DWORD(7),11(R2) remove leading zeroes
         LA    R1,1 min len of file literal
         LA    RF,DWORD+1
         CLC   ASCZEROS(6),5(R2)
         BE    RBLOCK0 ...
         LA    R1,1(,R1) incr filename len
         LA    RF,1(,RF) incr ptr
         CLC   ASCZEROS(5),5(R2)
         BE    RBLOCK0 ...
         LA    R1,1(,R1) incr filename len
         LA    RF,1(,RF) incr ptr
         CLC   ASCZEROS(4),5(R2)
         BE    RBLOCK0 ...
         LA    R1,1(,R1) incr filename len
         LA    RF,1(,RF) incr ptr
         CLC   ASCZEROS(3),5(R2)
         BE    RBLOCK0 ...
         LA    R1,1(,R1) incr filename len
         LA    RF,1(,RF) incr ptr
         CLC   ASCZEROS(2),5(R2)
         BE    RBLOCK0 ...
         LA    R1,1(,R1) incr filename len
         LA    RF,1(,RF) incr ptr
         CLC   ASCZEROS(1),5(R2)
         BE    RBLOCK0 ...
         LA    R1,1(,R1) incr filename len
         LA    RF,1(,RF) incr ptr
RBLOCK0  BCTR  R1,0 ex len
         LA    RE,DWORD(R1) last valid char
         EX    R1,RBLOCK0M
         LR    RE,R2 save ptr to block???? filename for laterusage
         LR    RF,R2 calc ptr to filename len field
         SH    RF,=H'4' backtrack
         LA    R2,6(R1,R2) ptr
         LA    R1,6(,R1) total file name len
         STCM  R1,1,0(RF) new len
         STC   R1,FILENLEN central dir filenamelen
         LR    RF,R1 save filename len #  for later usage
         L     R1,DIRPTR start of current saved dir info area
         USING XDIRMAP,R1
         MVC   XFILETIM(2),FILETIME
         MVC   XFILEDTE(2),FILEDATE
         MVC   XFILENLN(2),FILENLEN
         MVCIN XFILELFO(4),FILELOFF+3 save total local filehdr offset
         BCTR  RF,0 for ex of filename
         EX    RF,SAVEFN ...
         B     BYPASSFN continue
MOVUSSFN MVC   PATHNAME(*-*),2(R2) save passed USS filename
SAVEFN   MVC   XFILEFNC(*-*),0(RE) copy filename from original loc
         DROP  R1
BYPASSFN ST    R2,BUFFRPTR
         ST    R2,COMPRPTR save ptr to start compressed data
* setup '01'b and '1'b fixed codes; last block
         LA    R0,3      bit sequence='011'b
         LA    R1,3      bit count - rightmost 3 bits
         BAL   RE,BITWRITR ...
         MVC   CRCCALC,CRCINIT crc pre-process with 'ffffffff'x
         TM    FLAGS,X'40' block complete loop
         BZ    LOOP no;normal
         NI    FLAGS,X'BF' turn off this flag
         B     LOOP1 use prev gotten rcd which was page #51
LOOP     GET   INPUT,INAREA
*SNAP DCB=SNAPDCB,ID=2,STORAGE=(INAREA,INAREA+200)
LOOP1    CLI   INAREA,C'1' new page??
         BNE   NOTPAGE no...
         L     RF,PAGECTR
         LA    RF,1(,RF) +1
         ST    RF,PAGECTR
         C     RF,=F'51' if 51st page then block chunk complete
         BL    NOTPAGE no, continue
         XC    PAGECTR,PAGECTR reset page ctr to zero
         OI    FLAGS,X'40' block finished flag
         B     EOD      continue writing out this block
NOTPAGE  LA    R9,INPUT get record's LRECL
         USING IHADCB,R9
         LH    R9,DCBLRECL ...
         DROP  R9
         LA    RF,INAREA
         ALR   RF,R9 add cr-lf to os/390 record oriented stream
         MVI   0(RF),X'15' lf
         LA    R9,1(,R9) incr input char count
         MVC   CURROFF,NEXTOFF duplicate string offset
         L     RF,TOTALCHR increment total uncompressed char count
         AR    RF,R9 ...
         ST    RF,TOTALCHR ...
         ST    RF,NEXTOFF next duplicate string offset
         BCTR  R9,0 for execute
         EX    R9,TRASCII perform cp-037 to 8859-1 translation
         LA    RF,INAREA set of crc input bytes
         LA    R1,1(,R9) record byte count
         L     R2,CRCCALC current running crc-32
CRCLOOP  LR    R3,R2      current running crc-32
         IC    R3,0(,RF)
         XR    R3,R2 low byte is used as index into crc table
         SLL   R3,2 for index
         SRL   R2,8 shift current crc right 8
         X     R2,CRC32TAB(R3) xor with table
         LA    RF,1(,RF) next input crc byte
         BCT   R1,CRCLOOP ...
         ST    R2,CRCCALC current running crc-32
         LA    R3,INAREA locate runs of blanks
         LA    R4,INAREA2 locate runs of blanks
         LA    RF,1(,R9) # of bytes to scan
         L     RE,CURROFF current string offset within file
         SLR   R2,R2     total# bytes
LOOPBLK2 MVI   DUPLCHAR,X'20' ascii blank
         CLC   =X'202020',0(R3) string of min run of 3
         BE    RUNBLANK yes
         MVI   DUPLCHAR,X'2D' ascii dash
         CLC   =X'2D2D2D',0(R3) string of min run of 3
         BE    RUNBLANK yes
         MVI   DUPLCHAR,X'2A' ascii asterisk
         CLC   =X'2A2A2A',0(R3) string of min run of 3
         BE    RUNBLANK yes
         MVI   DUPLCHAR,X'3D' ascii equal sign
         CLC   =X'3D3D3D',0(R3) string of min run of 3
         BE    RUNBLANK yes
         MVI   DUPLCHAR,X'30' ascii zero
         CLC   =X'303030',0(R3) string of min run of 3
         BE    RUNBLANK yes
         MVI   DUPLCHAR,X'C4' ascii horiz bar
         CLC   =X'C4C4C4',0(R3) string of min run of 3
         BE    RUNBLANK yes
         MVC   0(1,R4),0(R3) propagate one byte
         LA    R2,1(,R2) ...
         LA    R3,1(,R3) ...
         LA    R4,1(,R4) ...
         LA    RE,1(,RE) ...
         BCT   RF,LOOPBLK2 continue
         B     XCHAR continue
RUNBLANK MVC   0(2,R4),=X'FEFD' internal code for blank run
         STCM  RE,15,2(R4) store in output stream
         LA    R2,6(,R2) ...
         LA    R4,6(,R4) ...
         SLR   R1,R1 count of consecutive blanks
         MVC   LOOPBLK5+1(1),DUPLCHAR ng but easiest-duplicated charac
LOOPBLK5 CLI   0(R3),X'00' ascii blank or other duplic char
         BNE   RUNBLNK3 nope
         LA    R1,1(,R1) continue
         LA    R3,1(,R3) continue
         LA    RE,1(,RE) ...
         BCT   RF,LOOPBLK5 ...
RUNBLNK3 STC   R1,0(,R4) duplic char count
         MVC   1(1,R4),DUPLCHAR save duplic char in stream
         LA    R2,2(,R2) tot # out bytes
         LA    R4,2(,R4) target position
         LTR   RF,RF anything left to scan
         BNZ   LOOPBLK2 yes
XCHAR    LA    R4,INAREA2 set of input bytes
         LR    R9,R2 total # bytes to write
*SNAP DCB=SNAPDCB,ID=3,STORAGE=(INAREA2,INAREA2+200)
XCHAR2   MVC   DWORD(1),0(R4) acquire a byte
         NI    FLAGS,X'7F' turn off duplic str reduction processing
         CLI   DWORD,X'90' is this one an extended char??
         BNL   XCHAR3 yes
         C     R9,=F'4' are there 4 bytes to write
         BNL   XCHAR2K yes, try to speed up processing
XCHAR2J  TR    DWORD(1),HUFFLLEN convert 1 char
         SLR   R0,R0 clear
         IC    R0,DWORD+0 bytes to be written
         LA    R1,8      bit count
         BAL   RE,BITWRITR ...
         LA    R4,1(,R4) input ptr
         BCT   R9,XCHAR2
         B     LOOP
XCHAR2K  CLI   1(R4),X'90' make sure no extended chars in these bytes
         BNL   XCHAR2J skip optimization
         CLI   2(R4),X'90' make sure no extended chars in these bytes
         BNL   XCHAR2J skip optimization
         CLI   3(R4),X'90' make sure no extended chars in these bytes
         BNL   XCHAR2J skip optimization
         MVCIN DWORD(4),3(R4) acquire 4 bytes
         TR    DWORD(4),HUFFLLEN convert 4 chars
         ICM   R0,15,DWORD bytes to be written
         LA    R1,32     bit count
         BAL   RE,BITWRITR ...
         LA    R4,4(,R4) input ptr
         S     R9,=F'3' reduce by chars processed
         BCT   R9,XCHAR2
         B     LOOP
XCHAR3   CLC   =X'FEFD',0(R4) internal blank run code
         BNE   XCHAR5 no
         SLR   RE,RE count of blanks or other char
         IC    RE,6(,R4) ...
         BCTR  RE,0     indexinto prev blank string table
         SLL   RE,2 x4
         L     RF,=A(BLNKDUPL) index into table
         CLI   7(R4),X'20' ascii blank
         BE    XCHAR3A continue
         L     RF,=A(DASHDUPL) index into table
         CLI   7(R4),X'2D' ascii dash
         BE    XCHAR3A continue
         L     RF,=A(STARDUPL) index into table
         CLI   7(R4),X'2A' ascii asterisk
         BE    XCHAR3A continue
         L     RF,=A(ZERODUPL) index into table
         CLI   7(R4),X'30' ascii zero
         BE    XCHAR3A continue
         L     RF,=A(HBARDUPL) index into table
         CLI   7(R4),X'C4' ascii horiz bar tr from bf to c4
         BE    XCHAR3A continue
         L     RF,=A(EQULDUPL) lastone-mustbe = sign
XCHAR3A  LA    R3,0(RE,RF) calc ptr
         L     R1,0(,R3) ...
         LTR   R1,R1 if zero then no prev string with thislen
         BZ    ADDXSTR
         ICM   R2,15,2(R4) offset of this blank/etc run string
         SR    R2,R1 old offset should be within 32768 bytes
         C     R2,=F'32768' max distance offset
         BH    ADDXSTR no good, use as if new offset
         ST    R2,DWORD+12 save backwards distance here
         ICM   R2,15,2(R4) offset of this blank run string
         STCM  R2,15,0(R3) new offset into slot closer to where we are
XCHARX0  L     RF,=A(LENTABLE) get correct LENTABLE entry
         SLR   RE,RE count of blanks
         IC    RE,6(,R4) ...
         ST    RE,DWORD+8  save duplicate string len here
XCHARX1  LM    R0,R3,0(RF) get whole entry
         CR    RE,R3 entry maxlen
         BNH   XCHARX3 continue
         LA    RF,16(,RF) look at next entry
         B     XCHARX1 ...
ADDXSTR  ICM   R2,15,2(R4) offset of this blank/etc run string
         STCM  R2,15,0(R3) new offset into slot
         SLR   RE,RE count of blanks/etc
         IC    RE,6(,R4) ...
         ST    RE,DWORD+16 save ORIGINAL blank/etc count here
ADDXSTR1 CLR   R3,RF loop backwards through blank dupltab forlong str
         BNH   ADDXSTR2 nothing to match
         SL    R3,=F'4' backup 1 entry
         BCTR  RE,0 # consecutive blanks/etc for this entry
         L     R1,0(,R3) ...
         LTR   R1,R1 if zero then no prev string with thislen
         BNZ   ADDXST11 continue
         CL    RE,=F'2' doublechek- dont handle strlen less than 3
         BNH   ADDXSTR2 forget this and continue regular way
         STCM  R2,15,0(R3) new offset into slot - fillin backwards
         B     ADDXSTR1 ...
ADDXST11 ICM   R2,15,2(R4) offset of this blank run string
         SR    R2,R1 old offset should be within 32768 bytes
         C     R2,=F'32768' max distance offset
         BH    ADDXSTR2 no good, use as if new offset
         ST    R2,DWORD+12 save backwards distance here
         STC   RE,6(,R4) store revised lower blank/etc count
         ST    RE,DWORD+20 max dupl string size to use for this
         L     R0,DWORD+16 blanks/etc left to do
         SLR   R0,RE ...
         ST    R0,DWORD+16 blanks/etc left to do
         OI    FLAGS,X'80' turn on duplic str reduction
*SNAP DCB=SNAPDCB,ID=4,STORAGE=(DWORD,DWORD+23)
         B     XCHARX0 continue processing with smaller duplic str
ADDXSTR2 SLR   R3,R3 count of blanks/etc
         IC    R3,6(,R4) ...
         MVC   ADDXSTR3+1(1),7(R4) get duplicate char
ADDXSTR3 MVI   DWORD,X'00' a blank or other char
         CLI   DWORD,X'90' is this one an extended char??
         BNL   ADDXSTX3 yes go handle those
         TR    DWORD(1),HUFFLLEN convert 1 char
         C     R3,=F'4' is the fillin count greater than 4 now
         BH    ADDXSTZ3 yes, speed up bit conversion
         SLR   R0,R0 clear
         IC    R0,DWORD bytes to be written
         LA    R1,8      bit count
ADDXSTY3 BAL   RE,BITWRITR ...
ADDXSTY4 BCT   R3,ADDXSTR3 loop for this many blanks
XCHARX99 LA    R4,8(,R4) input ptr after dupl string declaration
         SL    R9,=F'8' -declaration count
         LTR   R9,R9 anymore
         BNZ   XCHAR2
         B     LOOP
ADDXSTZ3 MVC   DWORD+1(3),DWORD fillup with translated char
         ICM   R0,15,DWORD for bit writer
         LA    R1,32 bit count
         BAL   RE,BITWRITR ...
         SL    R3,=F'3' -count filled
         B     ADDXSTY4 continue
ADDXSTX3 TR    DWORD(1),HUFFLLEN convert 1 char
         SLR   R0,R0 clear
         IC    R0,DWORD bytes to be written
         SLL   R0,1 shift 1 bit to left to append reversed hi bit =1
         O     R0,=A(X'00000001') add 1 bit for fixed huffman encoding
         LA    R1,9      bit count
         B     ADDXSTY3 move back to main loop ...
XCHARX3  ST    RF,DWORD+4  save LENTABLE entry ptr here
         LR    RF,R0 save code of 257, 258, etc.
         L     R3,=A(HUFFLLEN) get huff code for this len
         ALR   R3,R0 R0 contains code of 257, 258,...
         MVC   DWORD(1),0(R3) work with this code
         SLR   R0,R0 clear
         IC    R0,DWORD bytes to be written
         CL    RF,=F'280' codes 257-279=7 bits;280-287=8 bits
         BNL   XCHARX5 use 8 bits
         LA    R1,7      bit count forlens 257-279
         SRL   R0,1 remove extraneous hi bit (reversed) for 7 bits
         BAL   RE,BITWRITR ...
         B     XCHARX6 ...
XCHARX5  LA    R1,8 bit count for 280-287
         BAL   RE,BITWRITR ...
XCHARX6  L     RF,DWORD+4 restore LENTABLE entry
         LM    R0,R3,0(RF) get whole entry- R1=extra bits to write
         LTR   R1,R1 any more bits for length field
         BZ    XCHARX7 continue
         L     R3,DWORD+8 calc extra len field value
         SLR   R3,R2 ...R3 now has correct len for extra bits
         LR    R0,R3 for bit writer
         BAL   RE,BITWRITR ...
XCHARX7  L     RF,=A(DSTTABLE) get correct DSTTABLE entry
         L     RE,DWORD+12 current distance value
XCHARX8  LM    R0,R3,0(RF) get whole entry
         CR    RE,R3 entry maxlen
         BNH   XCHARX9 continue
         LA    RF,16(,RF) look at next entry
         B     XCHARX8 ...
XCHARX9  ST    RF,DWORD save DSTTABLE entry ptr temporarily
         LA    R1,5 5 bits to write
         BAL   RE,BITWRITR R0 has reversed dist code already
         L     RF,DWORD restore DSTTABLE entry
         LM    R0,R3,0(RF) get whole entry- R1=extra bits to write
         LTR   R1,R1 any more bits for dst field
         BZ    XCHARX98 continue
         L     R3,DWORD+12 calc extra dst field value
         SLR   R3,R2 ...R3 now has correct value for extra bits
         LR    R0,R3 for bit writer
         BAL   RE,BITWRITR ...
XCHARX98 TM    FLAGS,X'80' in midst of reduced duplstr processing??
         BZ    XCHARX99 no ...
         LM    R0,R1,DWORD+16 blanks/etc left to do;blnk/etc dupl size
         STC   R0,6(,R4) update counter of blanks/etc to string out
         B     ADDXSTR2 ...
XCHAR5   TR    DWORD(1),HUFFLLEN convert 1 char
         SLR   R0,R0 clear
         IC    R0,DWORD bytes to be written
         SLL   R0,1 shift 1 bit to left to append reversed hi bit =1
         O     R0,=A(X'00000001') add 1 bit for fixed huffman encoding
         LA    R1,9      bit count
         BAL   RE,BITWRITR ...
         LA    R4,1(,R4) input ptr
         BCT   R9,XCHAR2
         B     LOOP
HUFFOI   OI    DWORD,*-*
HUFFTM   TM    0(R2),*-*
TRASCII  TR    INAREA(*-*),X0378859
RBLOCK0M MVCIN 5(*-*,R2),0(RE)
EOD      L     R2,CRCCALC running crc-32
         X     R2,CRCINIT zip crc-32 calc ones complement at end
         ST    R2,CRCCALC current running crc-32
         SLR   R0,R0 eob = 256 huffman code
         LA    R1,7 eob  bit count
         BAL   RE,BITWRITR ...
         L     RF,BUFFRPTR currently written byte ptr
         CLC   =F'8',BITCTR whole # bytes written
         BE    EOD3 yes
         LA    RF,1(,RF) incr by 1 for partially written byte
         ST    RF,BUFFRPTR store
EOD3     LR    R0,RF save temp ptr to last compressed data byte
         MVC   0(4,RF),DDESCHDR move in data descriptor header sign
         MVCIN 4(4,RF),CRCCALC+3 move crc-32 result into position
         MVCIN FILECRC(4),CRCCALC+3 move crc-32 result into position
         LA    RF,8(,RF) next output spot
         S     R0,COMPRPTR calc compressed data size
         ST    R0,COMPRPTR ...
         MVCIN 0(4,RF),COMPRPTR+3 move compressed count in
         MVCIN FILECSIZ(4),COMPRPTR+3 move compressed count in
         LA    RF,4(,RF) next output spot
         MVCIN 0(4,RF),TOTALCHR+3 move uncompressed count in
         MVCIN FILEUSIZ(4),TOTALCHR+3 move uncompressed count in
         LA    RF,4(,RF) next output spot
         ST    RF,BUFFRPTR store
         L     R1,DIRPTR start of current saved dir info area
         USING XDIRMAP,R1
         MVC   XFILECRC(4),FILECRC
         MVC   XFILECMP(4),FILECSIZ
         MVC   XFILEUCP(4),FILEUSIZ
         SLR   R2,R2 calc offset for next dir entry
         IC    R2,XFILENLN get filename len for calc
         LA    R1,22(R2,R1) next spot
         ST    R1,DIRPTR saved
         DROP  R1
         XC    SERVRETV,SERVRETV
         XC    SERVRETC,SERVRETC
         XC    SERVREAS,SERVREAS
         XC    BUFFALET,BUFFALET
         L     R2,BUFFRBGN output buffer start
         ST    R2,DATAPTR
         L     RF,BUFFRPTR calc write len
         SLR   RF,R2 ...
         ST    RF,DATAWCTR ...
         ICM   R0,15,FILELOFF get offset
         ALR   RF,R0       total zipped file offset for cent dir
         STCM  RF,15,FILELOFF save ...
         CALL  BPX1WRT,(FD,                                            X
               DATAPTR,                                                X
               BUFFALET,                                               X
               DATAWCTR,                                               X
               SERVRETV,                                               X
               SERVRETC,                                               X
               SERVREAS),                                              X
               VL
         ICM   RF,15,SERVRETV IF -1 THEN ERROR
         BM    FAIL
         C     RF,DATAWCTR ALL CHARACTERS WRITTEN
         BNE   FAIL
         XC    FILECRC,FILECRC
         XC    FILECSIZ,FILECSIZ
         XC    FILEUSIZ,FILEUSIZ
         TM    FLAGS,X'40' block complete loop
         BO    NEXTBLK yes, continue
         L     RF,BUFFRBGN restore to start buffer
         ST    RF,CENTSPTR store for later usage start central dir
         ST    RF,BUFFRPTR store for later usage start central dir
         MVCIN CENTDOFF(4),FILELOFF+3 end central dir ptr to dir start
         L     RE,DIRSTOR start of saved central dirinfo
         LH    R3,CENTFCNT count of total# saved cent dir info entries
         USING XDIRMAP,RE
FILLCDIR MVC   FILETIME(2),XFILETIM
         MVC   FILEDATE(2),XFILEDTE
         MVC   FILECRC(4),XFILECRC
         MVC   FILECSIZ(4),XFILECMP
         MVC   FILEUSIZ(4),XFILEUCP
         MVC   FILENLEN(2),XFILENLN
         MVC   FILELOFF(4),XFILELFO
         MVC   0(CENTFHRL,RF),CENTFHDR
         LA    RF,CENTFHRL(,RF)
         ST    RF,BUFFRPTR store
         LA    R1,XFILEFNC ptr to current filename
         DROP  RE
         SLR   R2,R2 clear for ex
         IC    R2,FILENLEN size of current filename
         BCTR  R2,0 ..
         EX    R2,MOVECFN move
         LA    RF,1(R2,RF)
         ST    RF,BUFFRPTR store
         LA    RE,23(R2,RE) next saved cent dir info loc
         BCT   R3,FILLCDIR loop
         LR    R1,RF calc size of central dir
         SL    R1,CENTSPTR calc size of central dir
         ST    R1,DWORD ...
         MVCIN CENTSIZE(4),DWORD+3 ...
         ICM   R1,3,CENTFCNT intel reverse file counts
         STCM  R1,1,CENTFCNT ...
         STCM  R1,2,CENTFCNT+1 ...
         MVC   CENTFCN2(2),CENTFCNT ditto
         MVC   0(ECENTDRL,RF),ECENTDIR move in ending central dir
         LA    RF,ECENTDRL(,RF) ...
         ST    RF,BUFFRPTR updated
         XC    SERVRETV,SERVRETV
         XC    SERVRETC,SERVRETC
         XC    SERVREAS,SERVREAS
         XC    BUFFALET,BUFFALET
         L     R2,BUFFRBGN output buffer start
         ST    R2,DATAPTR
         L     RF,BUFFRPTR calc write len
         SLR   RF,R2 ...
         ST    RF,DATAWCTR ...
         CALL  BPX1WRT,(FD,                                            X
               DATAPTR,                                                X
               BUFFALET,                                               X
               DATAWCTR,                                               X
               SERVRETV,                                               X
               SERVRETC,                                               X
               SERVREAS),                                              X
               VL
         ICM   RF,15,SERVRETV IF -1 THEN ERROR
         BM    FAIL
         C     RF,DATAWCTR ALL CHARACTERS WRITTEN
         BNE   FAIL
TERM     CLOSE (INPUT)
         FREEPOOL INPUT
         XC    SERVRETV,SERVRETV
         XC    SERVRETC,SERVRETC
         XC    SERVREAS,SERVREAS
         CALL  BPX1CLO,(FD,                                            X
               SERVRETV,                                               X
               SERVRETC,                                               X
               SERVREAS),                                              X
               VL
         ICM   RF,15,SERVRETV IF -1 THEN ERROR
         BM    FAIL
         L     R0,=A(768*1024)
         L     R1,BUFFRBGN
         STORAGE RELEASE,ADDR=(1),LENGTH=(0) FREE WORKAREA
         PR    ,
FAIL     LA    RF,24 error
         PR    ,
NOPARM   LA    RF,28 error
         PR    ,
MOVECFN  MVC   0(*-*,RF),0(R1) move current filename
BITWRITR EQU   * * bit serial writer
* R0-up to 4 bytes data bits 31..30...2..1..0
* R1-rightmost bit ctr of 1,2,3,...,32
* RD-work - saved
* RE-return ptr - saved
* RF-work
* ref BITBUCKT storage -  2D'0'; BITCTR - remaining bits to be filled
         STM   R0,R1,BITBUCKT+0 save some regs
         STM   RD,RE,BITBUCKT+8 save some regs
*SNAP DCB=SNAPDCB,ID=1,STORAGE=(BITBUCKT,BITBUCKT+07,BITCTR,BITCTR+3,BU
*              FFRPTR,BUFFRPTR+3)
*LM    R0,R1,BITBUCKT+0 save some regs
*LM    RD,RE,BITBUCKT+8 save some regs
BITWTRI  L     RE,BUFFRPTR byte to be written loc
         CLC   =F'8',BITCTR new byte to be written
         BNE   BITWTR1 no, byte was prev initialized
         MVI   0(RE),X'00' set new byte allzero bits
BITWTR1  C     R1,BITCTR compare to be writtn #bits to bitsleftin byte
         BH    BITWTR2 too many bits to write-use BITCTR
         LR    RF,R1 use #bits to be written
         B     BITWTR4 continue
BITWTR2  L     RF,BITCTR use the most bits that we can fit in byte
BITWTR4  LR    RD,RF index into mask for # bits to be written
         BCTR  RD,0 ...
         SLL   RD,2 x4
         N     R0,BITMASK1(RD) only bits req for this round left
         LA    RD,8      calc bit loc in target byte
         S     RD,BITCTR calc bit loc in target byte
         SLL   R0,0(RD) position bits to be saved for target byte
         STC   R0,BITBUCKT+4 place into workarea for usage in OC
         OC    0(1,RE),BITBUCKT+4 new bits written to output stream
         SR    R1,RF remaining # of bits left to write for this req
         L     R0,BITBUCKT+0 restore current bit seq to be written
         SRL   R0,0(RF) shift off bits already written
         ST    R0,BITBUCKT+0 save current to be written bits
         L     R0,BITCTR calc # bits remaining in this target byte
         SR    R0,RF new total bits left in this target byte
         BZ    BITWTR7 nothing left
         ST    R0,BITCTR save new total in storage
         B     BITWTR9 continue
BITWTR7  LA    R0,8 reset to 8 bits left in next byte
         ST    R0,BITCTR save new total in storage
         LA    RE,1(,RE) next target byte loc
         ST    RE,BUFFRPTR byte to be written loc
BITWTR9  L     R0,BITBUCKT+0 current to be written bits
         LTR   R1,R1 any bits left to be written
         BNZ   BITWTRI loop
         LM    RD,RE,BITBUCKT+8 restore used regs
         BR    RE return
         LTORG
SAVEAREA DC    9D'0'
DWORD    DC    4D'0'
BITBUCKT DC    2D'0'
BITCTR   DC    F'8' number bits left to be filled in current byte
FLAGS    DC    A(*-*) x80=duplic str reduction phase
*                     x40=block of 50 pages finished
BITMASK1 DC    X'00000001' mask for bits to be written
         DC    X'00000003' mask for bits to be written
         DC    X'00000007' mask for bits to be written
         DC    X'0000000F' mask for bits to be written
         DC    X'0000001F' mask for bits to be written
         DC    X'0000003F' mask for bits to be written
         DC    X'0000007F' mask for bits to be written
         DC    X'000000FF' mask for bits to be written
BUFFRBGN DC    A(*-*)
BUFFRPTR DC    A(*-*)
FILENPTR DC    A(*-*) ptr to current filename
INPUT    DCB   DDNAME=INPUT,DSORG=PS,MACRF=(GM),EODAD=EOD
PATHNLEN DC    A(*-*) PATH NAME LENGTH
FILEOPTN DC    AL1(0),AL1(0),AL1(0),AL1(O_CREAT+O_TRUNC+O_WRONLY)
FILEMODE DC    AL1(FT_REGFILE),AL1(0),AL1(S_IRUSR) +
         DC    AL1(S_IRWXU2+S_IRWXG+S_IRWXO)
BUFFALET DC    A(0)
DATAPTR  DC    A(*-*)
DATAWCTR DC    A(*-*)
DIRSTOR  DC    A(*-*) ptr to start temp dir info stor
DIRPTR   DC    A(*-*) ptr to temp dir info stor
PAGECTR  DC    F'0' page ctr for each 50 page chunk
SERVRETV DC    A(0)
SERVRETC DC    A(0)
SERVREAS DC    A(0)
FD       DC    A(0)
CENTSPTR DC    A(*-*) ptr to start of central dir
TOTALCHR DC    A(*-*) total file uncompressed char count
COMPRPTR DC    A(*-*) beginning of compressed block data
CRCCALC  DC    A(*-*) calculated crc-32 value
CURROFF  DC    A(*-*) duplicate string offset
NEXTOFF  DC    A(*-*) duplicate string offset
CRCINIT  DC    A(X'FFFFFFFF')
CRC32TAB EQU   * * crc32 values by byte table
CRC0     DC    X'00000000'
CRC1     DC    X'77073096'
CRC2     DC    X'EE0E612C'
CRC3     DC    X'990951BA'
CRC4     DC    X'076DC419'
CRC5     DC    X'706AF48F'
CRC6     DC    X'E963A535'
CRC7     DC    X'9E6495A3'
CRC8     DC    X'0EDB8832'
CRC9     DC    X'79DCB8A4'
CRC10    DC    X'E0D5E91E'
CRC11    DC    X'97D2D988'
CRC12    DC    X'09B64C2B'
CRC13    DC    X'7EB17CBD'
CRC14    DC    X'E7B82D07'
CRC15    DC    X'90BF1D91'
CRC16    DC    X'1DB71064'
CRC17    DC    X'6AB020F2'
CRC18    DC    X'F3B97148'
CRC19    DC    X'84BE41DE'
CRC20    DC    X'1ADAD47D'
CRC21    DC    X'6DDDE4EB'
CRC22    DC    X'F4D4B551'
CRC23    DC    X'83D385C7'
CRC24    DC    X'136C9856'
CRC25    DC    X'646BA8C0'
CRC26    DC    X'FD62F97A'
CRC27    DC    X'8A65C9EC'
CRC28    DC    X'14015C4F'
CRC29    DC    X'63066CD9'
CRC30    DC    X'FA0F3D63'
CRC31    DC    X'8D080DF5'
CRC32    DC    X'3B6E20C8'
CRC33    DC    X'4C69105E'
CRC34    DC    X'D56041E4'
CRC35    DC    X'A2677172'
CRC36    DC    X'3C03E4D1'
CRC37    DC    X'4B04D447'
CRC38    DC    X'D20D85FD'
CRC39    DC    X'A50AB56B'
CRC40    DC    X'35B5A8FA'
CRC41    DC    X'42B2986C'
CRC42    DC    X'DBBBC9D6'
CRC43    DC    X'ACBCF940'
CRC44    DC    X'32D86CE3'
CRC45    DC    X'45DF5C75'
CRC46    DC    X'DCD60DCF'
CRC47    DC    X'ABD13D59'
CRC48    DC    X'26D930AC'
CRC49    DC    X'51DE003A'
CRC50    DC    X'C8D75180'
CRC51    DC    X'BFD06116'
CRC52    DC    X'21B4F4B5'
CRC53    DC    X'56B3C423'
CRC54    DC    X'CFBA9599'
CRC55    DC    X'B8BDA50F'
CRC56    DC    X'2802B89E'
CRC57    DC    X'5F058808'
CRC58    DC    X'C60CD9B2'
CRC59    DC    X'B10BE924'
CRC60    DC    X'2F6F7C87'
CRC61    DC    X'58684C11'
CRC62    DC    X'C1611DAB'
CRC63    DC    X'B6662D3D'
CRC64    DC    X'76DC4190'
CRC65    DC    X'01DB7106'
CRC66    DC    X'98D220BC'
CRC67    DC    X'EFD5102A'
CRC68    DC    X'71B18589'
CRC69    DC    X'06B6B51F'
CRC70    DC    X'9FBFE4A5'
CRC71    DC    X'E8B8D433'
CRC72    DC    X'7807C9A2'
CRC73    DC    X'0F00F934'
CRC74    DC    X'9609A88E'
CRC75    DC    X'E10E9818'
CRC76    DC    X'7F6A0DBB'
CRC77    DC    X'086D3D2D'
CRC78    DC    X'91646C97'
CRC79    DC    X'E6635C01'
CRC80    DC    X'6B6B51F4'
CRC81    DC    X'1C6C6162'
CRC82    DC    X'856530D8'
CRC83    DC    X'F262004E'
CRC84    DC    X'6C0695ED'
CRC85    DC    X'1B01A57B'
CRC86    DC    X'8208F4C1'
CRC87    DC    X'F50FC457'
CRC88    DC    X'65B0D9C6'
CRC89    DC    X'12B7E950'
CRC90    DC    X'8BBEB8EA'
CRC91    DC    X'FCB9887C'
CRC92    DC    X'62DD1DDF'
CRC93    DC    X'15DA2D49'
CRC94    DC    X'8CD37CF3'
CRC95    DC    X'FBD44C65'
CRC96    DC    X'4DB26158'
CRC97    DC    X'3AB551CE'
CRC98    DC    X'A3BC0074'
CRC99    DC    X'D4BB30E2'
CRC100   DC    X'4ADFA541'
CRC101   DC    X'3DD895D7'
CRC102   DC    X'A4D1C46D'
CRC103   DC    X'D3D6F4FB'
CRC104   DC    X'4369E96A'
CRC105   DC    X'346ED9FC'
CRC106   DC    X'AD678846'
CRC107   DC    X'DA60B8D0'
CRC108   DC    X'44042D73'
CRC109   DC    X'33031DE5'
CRC110   DC    X'AA0A4C5F'
CRC111   DC    X'DD0D7CC9'
CRC112   DC    X'5005713C'
CRC113   DC    X'270241AA'
CRC114   DC    X'BE0B1010'
CRC115   DC    X'C90C2086'
CRC116   DC    X'5768B525'
CRC117   DC    X'206F85B3'
CRC118   DC    X'B966D409'
CRC119   DC    X'CE61E49F'
CRC120   DC    X'5EDEF90E'
CRC121   DC    X'29D9C998'
CRC122   DC    X'B0D09822'
CRC123   DC    X'C7D7A8B4'
CRC124   DC    X'59B33D17'
CRC125   DC    X'2EB40D81'
CRC126   DC    X'B7BD5C3B'
CRC127   DC    X'C0BA6CAD'
CRC128   DC    X'EDB88320'
CRC129   DC    X'9ABFB3B6'
CRC130   DC    X'03B6E20C'
CRC131   DC    X'74B1D29A'
CRC132   DC    X'EAD54739'
CRC133   DC    X'9DD277AF'
CRC134   DC    X'04DB2615'
CRC135   DC    X'73DC1683'
CRC136   DC    X'E3630B12'
CRC137   DC    X'94643B84'
CRC138   DC    X'0D6D6A3E'
CRC139   DC    X'7A6A5AA8'
CRC140   DC    X'E40ECF0B'
CRC141   DC    X'9309FF9D'
CRC142   DC    X'0A00AE27'
CRC143   DC    X'7D079EB1'
CRC144   DC    X'F00F9344'
CRC145   DC    X'8708A3D2'
CRC146   DC    X'1E01F268'
CRC147   DC    X'6906C2FE'
CRC148   DC    X'F762575D'
CRC149   DC    X'806567CB'
CRC150   DC    X'196C3671'
CRC151   DC    X'6E6B06E7'
CRC152   DC    X'FED41B76'
CRC153   DC    X'89D32BE0'
CRC154   DC    X'10DA7A5A'
CRC155   DC    X'67DD4ACC'
CRC156   DC    X'F9B9DF6F'
CRC157   DC    X'8EBEEFF9'
CRC158   DC    X'17B7BE43'
CRC159   DC    X'60B08ED5'
CRC160   DC    X'D6D6A3E8'
CRC161   DC    X'A1D1937E'
CRC162   DC    X'38D8C2C4'
CRC163   DC    X'4FDFF252'
CRC164   DC    X'D1BB67F1'
CRC165   DC    X'A6BC5767'
CRC166   DC    X'3FB506DD'
CRC167   DC    X'48B2364B'
CRC168   DC    X'D80D2BDA'
CRC169   DC    X'AF0A1B4C'
CRC170   DC    X'36034AF6'
CRC171   DC    X'41047A60'
CRC172   DC    X'DF60EFC3'
CRC173   DC    X'A867DF55'
CRC174   DC    X'316E8EEF'
CRC175   DC    X'4669BE79'
CRC176   DC    X'CB61B38C'
CRC177   DC    X'BC66831A'
CRC178   DC    X'256FD2A0'
CRC179   DC    X'5268E236'
CRC180   DC    X'CC0C7795'
CRC181   DC    X'BB0B4703'
CRC182   DC    X'220216B9'
CRC183   DC    X'5505262F'
CRC184   DC    X'C5BA3BBE'
CRC185   DC    X'B2BD0B28'
CRC186   DC    X'2BB45A92'
CRC187   DC    X'5CB36A04'
CRC188   DC    X'C2D7FFA7'
CRC189   DC    X'B5D0CF31'
CRC190   DC    X'2CD99E8B'
CRC191   DC    X'5BDEAE1D'
CRC192   DC    X'9B64C2B0'
CRC193   DC    X'EC63F226'
CRC194   DC    X'756AA39C'
CRC195   DC    X'026D930A'
CRC196   DC    X'9C0906A9'
CRC197   DC    X'EB0E363F'
CRC198   DC    X'72076785'
CRC199   DC    X'05005713'
CRC200   DC    X'95BF4A82'
CRC201   DC    X'E2B87A14'
CRC202   DC    X'7BB12BAE'
CRC203   DC    X'0CB61B38'
CRC204   DC    X'92D28E9B'
CRC205   DC    X'E5D5BE0D'
CRC206   DC    X'7CDCEFB7'
CRC207   DC    X'0BDBDF21'
CRC208   DC    X'86D3D2D4'
CRC209   DC    X'F1D4E242'
CRC210   DC    X'68DDB3F8'
CRC211   DC    X'1FDA836E'
CRC212   DC    X'81BE16CD'
CRC213   DC    X'F6B9265B'
CRC214   DC    X'6FB077E1'
CRC215   DC    X'18B74777'
CRC216   DC    X'88085AE6'
CRC217   DC    X'FF0F6A70'
CRC218   DC    X'66063BCA'
CRC219   DC    X'11010B5C'
CRC220   DC    X'8F659EFF'
CRC221   DC    X'F862AE69'
CRC222   DC    X'616BFFD3'
CRC223   DC    X'166CCF45'
CRC224   DC    X'A00AE278'
CRC225   DC    X'D70DD2EE'
CRC226   DC    X'4E048354'
CRC227   DC    X'3903B3C2'
CRC228   DC    X'A7672661'
CRC229   DC    X'D06016F7'
CRC230   DC    X'4969474D'
CRC231   DC    X'3E6E77DB'
CRC232   DC    X'AED16A4A'
CRC233   DC    X'D9D65ADC'
CRC234   DC    X'40DF0B66'
CRC235   DC    X'37D83BF0'
CRC236   DC    X'A9BCAE53'
CRC237   DC    X'DEBB9EC5'
CRC238   DC    X'47B2CF7F'
CRC239   DC    X'30B5FFE9'
CRC240   DC    X'BDBDF21C'
CRC241   DC    X'CABAC28A'
CRC242   DC    X'53B39330'
CRC243   DC    X'24B4A3A6'
CRC244   DC    X'BAD03605'
CRC245   DC    X'CDD70693'
CRC246   DC    X'54DE5729'
CRC247   DC    X'23D967BF'
CRC248   DC    X'B3667A2E'
CRC249   DC    X'C4614AB8'
CRC250   DC    X'5D681B02'
CRC251   DC    X'2A6F2B94'
CRC252   DC    X'B40BBE37'
CRC253   DC    X'C30C8EA1'
CRC254   DC    X'5A05DF1B'
CRC255   DC    X'2D02EF8D'
PATHNAME DC    CL100' '
DUPLCHAR DC    C' ' duplicate char working on -blnk,-,*,=
ASCZEROS DC    XL6'303030303030'
LOCLSIGN DC    0F'0',X'504B0304' local file hdr signature
DDESCHDR DC    X'504B0708' undocumented? data descriptor header
CENTFHDR EQU   * * central file header
         DC    X'504B0102' signature
         DC    X'1400' version
LOCLFHDR DC    X'1400' extract version
         DC    X'0800' data descriptor on for crc and sizes
         DC    X'0800' deflated compression
FILETIME DC    X'0000' ms-dos time 11-15 hr 5-10 min 0-4 sec/2
FILEDATE DC    X'0000' ms-dos date 10-15 yr-1980 5-9 mth 0-4 day
FILECRC  DC    X'00000000' crc-32
FILECSIZ DC    X'00000000' compressed size
FILEUSIZ DC    X'00000000' uncompressed size
FILENLEN DC    X'0000' file name len - blockxxxxxxx
         DC    X'0000' xtra field len
LOCLFSIZ EQU   *-LOCLFHDR
         DC    X'0000' file comment len
         DC    X'0000' disk# start
         DC    X'0000' internal file attributes
         DC    X'00000000' external file attributes
FILELOFF DC    X'00000000' relative offset of local file hdr
CENTFHRL EQU   *-CENTFHDR end central file header length
ECENTDIR DC    X'504B0506' end central directory
         DC    X'0000' disk#
         DC    X'0000' central directory disk#
CENTFCNT DC    X'0000' zip entries - file count
CENTFCN2 DC    X'0000' zip entries - file count ditto
CENTSIZE DC    X'00000000' central dir size excl end dir record
CENTDOFF DC    X'00000000' central dir start offset
         DC    X'0000' zip comment len
ECENTDRL EQU   *-ECENTDIR end central directory length
X0378859 EQU   * * CEE.SCEEGXLT(EDCUEAI1)
         DC    X'00' <NUL>
         DC    X'01' <SOH>
         DC    X'02' <STX>
         DC    X'03' <ETX>
         DC    X'9C' <SEL>
         DC    X'09' <TAB>
         DC    X'86' <RNL>
         DC    X'7F' <DEL>
         DC    X'97' <GE>
         DC    X'8D' <SPS>
         DC    X'8E' <RPT>
         DC    X'0B' <VERTICAL-TAB>
         DC    X'0C' <FORM-FEED>
         DC    X'0D' <CARRIAGE-RETURN>
         DC    X'0E' <SO>
         DC    X'0F' <SI>
         DC    X'10' <DLE>
         DC    X'11' <DC1>
         DC    X'12' <DC2>
         DC    X'13' <DC3>
         DC    X'9D' <RES>
         DC    X'0A' <NEWLINE>
         DC    X'08' <BACKSPACE>
         DC    X'87' <POC>
         DC    X'18' <CAN>
         DC    X'19' <EM>
         DC    X'92' <UBS>
         DC    X'8F' <CU1>
         DC    X'1C' <IFS>
         DC    X'1D' <IGS>
         DC    X'1E' <IRS>
         DC    X'1F' <IUS>
         DC    X'80' <DS>
         DC    X'81' <SOS>
         DC    X'82' <FS>
         DC    X'83' <WUS>
         DC    X'84' <BYP>
         DC    X'85' <LF>
         DC    X'17' <ETB>
         DC    X'1B' <ESC>
         DC    X'88' <SA>
         DC    X'89' <SFE>
         DC    X'8A' <SM>
         DC    X'8B' <CSP>
         DC    X'8C' <MFA>
         DC    X'05' <ENQ>
         DC    X'06' <ACK>
         DC    X'07' <ALERT>
         DC    X'90'
         DC    X'91'
         DC    X'16' <SYN>
         DC    X'93' <IR>
         DC    X'94' <PP>
         DC    X'95' <TRN>
         DC    X'96' <NBS>
         DC    X'04' <EOT>
         DC    X'98' <SBS>
         DC    X'99' <IT>
         DC    X'9A' <RFF>
         DC    X'9B' <CU3>
         DC    X'14' <DC4>
         DC    X'15' <NAK>
         DC    X'9E'
         DC    X'1A' <SUB>
         DC    X'20' <SPACE>
         DC    X'A0' <RSP>
         DC    X'E2' <A-CIRCUMFLEX>
         DC    X'E4' <A-DIAERESIS>
         DC    X'E0' <A-GRAVE>
         DC    X'E1' <A-ACUTE>
         DC    X'E3' <A-TILDE>
         DC    X'E5' <A-RING>
         DC    X'E7' <C-CEDILLA>
         DC    X'F1' <N-TILDE>
         DC    X'A2' <CENT>
         DC    X'2E' <PERIOD>
         DC    X'3C' <LESS-THAN-SIGN>
         DC    X'28' <LEFT-PARENTHESIS>
         DC    X'2B' <PLUS-SIGN>
         DC    X'7C' <VERTICAL-LINE>
         DC    X'26' <AMPERSAND>
         DC    X'E9' <E-ACUTE>
         DC    X'EA' <E-CIRCUMFLEX>
         DC    X'EB' <E-DIAERESIS>
         DC    X'E8' <E-GRAVE>
         DC    X'ED' <I-ACUTE>
         DC    X'EE' <I-CIRCUMFLEX>
         DC    X'EF' <I-DIAERESIS>
         DC    X'EC' <I-GRAVE>
         DC    X'DF' <S-SHARP>
         DC    X'21' <EXCLAMATION-MARK>
         DC    X'24' <DOLLAR-SIGN>
         DC    X'2A' <ASTERISK>
         DC    X'29' <RIGHT-PARENTHESIS>
         DC    X'3B' <SEMICOLON>
         DC    X'AC' <NOT>
         DC    X'2D' <HYPHEN>
         DC    X'2F' <SLASH>
         DC    X'C2' <A-CIRCUMFLEX>
         DC    X'C4' <A-DIAERESIS>
         DC    X'C0' <A-GRAVE>
         DC    X'C1' <A-ACUTE>
         DC    X'C3' <A-TILDE>
         DC    X'C5' <A-RING>
         DC    X'C7' <C-CEDILLA>
         DC    X'D1' <N-TILDE>
         DC    X'A6' <BROKEN-BAR>
         DC    X'2C' <COMMA>
         DC    X'25' <PERCENT-SIGN>
         DC    X'5F' <UNDERSCORE>
         DC    X'3E' <GREATER-THAN-SIGN>
         DC    X'3F' <QUESTION-MARK>
         DC    X'F8' <O-SLASH>
         DC    X'C9' <E-ACUTE>
         DC    X'CA' <E-CIRCUMFLEX>
         DC    X'CB' <E-DIAERESIS>
         DC    X'C8' <E-GRAVE>
         DC    X'CD' <I-ACUTE>
         DC    X'CE' <I-CIRCUMFLEX>
         DC    X'CF' <I-DIAERESIS>
         DC    X'CC' <I-GRAVE>
         DC    X'60' <GRAVE-ACCENT>
         DC    X'3A' <COLON>
         DC    X'23' <NUMBER-SIGN>
         DC    X'40' <COMMERCIAL-AT>
         DC    X'27' <APOSTROPHE>
         DC    X'3D' <EQUALS-SIGN>
         DC    X'22' <QUOTATION-MARK>
         DC    X'D8' <O-SLASH>
         DC    X'61' <A>
         DC    X'62' <B>
         DC    X'63' <C>
         DC    X'64' <D>
         DC    X'65' <E>
         DC    X'66' <F>
         DC    X'67' <G>
         DC    X'68' <H>
         DC    X'69' <I>
         DC    X'AB' <LEFT-ANGLE-QUOTES>
         DC    X'BB' <RIGHT-ANGLE-QUOTES>
         DC    X'F0' <ETH>
         DC    X'FD' <Y-ACUTE>
         DC    X'FE' <THORN>
         DC    X'B1' <PLUS-MINUS>
         DC    X'B0' <DEGREE>
         DC    X'6A' <J>
         DC    X'6B' <K>
         DC    X'6C' <L>
         DC    X'6D' <M>
         DC    X'6E' <N>
         DC    X'6F' <O>
         DC    X'70' <P>
         DC    X'71' <Q>
         DC    X'72' <R>
         DC    X'AA' <FEMININE>
         DC    X'BA' <MASCULINE>
         DC    X'E6' <AE>
         DC    X'B8' <CEDILLA>
         DC    X'C6' <AE>
         DC    X'A4' <CURRENCY>
         DC    X'B5' <MU>
         DC    X'7E' <TILDE>
         DC    X'73' <S>
         DC    X'74' <T>
         DC    X'75' <U>
         DC    X'76' <V>
         DC    X'77' <W>
         DC    X'78' <X>
         DC    X'79' <Y>
         DC    X'7A' <Z>
         DC    X'A1' <EXCLAMATION-DOWN>
*xAB     DC    X'BF' <QUESTION-DOWN> IBM replace lower left brack xasc
         DC    X'C0' lower left corner bracket xascii
*xAC     DC    X'D0' <ETH> IBM replace with upper left brack xascii
         DC    X'DA' upper left corner bracket
*xAD     DC    X'DD' <Y-ACUTE> IBM replace with x'5b' left sq brack
         DC    X'5B' <LEFT-SQUARE-BRACKET>
         DC    X'DE' <THORN>
         DC    X'AE' <REGISTERED>
         DC    X'5E' <CIRCUMFLEX>
         DC    X'A3' <STERLING>
         DC    X'A5' <YEN>
         DC    X'B7' <DOT>
         DC    X'A9' <COPYRIGHT>
         DC    X'A7' <SECTION>
         DC    X'B6' <PARAGRAPH>
         DC    X'BC' <ONE-QUARTER>
         DC    X'BD' <ONE-HALF>
         DC    X'BE' <THREE-QUARTERS>
         DC    X'5B' <LEFT-SQUARE-BRACKET>
*xBB     DC    X'5D' <RIGHT-SQUARE-BRACKET> IBM low rt bracket xasc
         DC    X'D9' lower right corner bracket xascii
*xBC     DC    X'AF' <MACRON> IBM replace w/ upper rt corner brack xas
         DC    X'BF' upper right corner bracket xascii
*xBD     DC    X'A8' <DIAERESIS> IBM replace with x'5d' right sq brack
         DC    X'5D' <RIGHT-SQUARE-BRACKET>
         DC    X'B4' <ACUTE>
*xBF     DC    X'D7' <MULTIPLY> IBM replace with x'C4' horiz bar xasc
         DC    X'C4' horizontal bar
         DC    X'7B' <LEFT-BRACE>
         DC    X'41' <A>
         DC    X'42' <B>
         DC    X'43' <C>
         DC    X'44' <D>
         DC    X'45' <E>
         DC    X'46' <F>
         DC    X'47' <G>
         DC    X'48' <H>
         DC    X'49' <I>
         DC    X'AD' <SYLLABLE-HYPHEN>
         DC    X'F4' <O-CIRCUMFLEX>
         DC    X'F6' <O-DIAERESIS>
         DC    X'F2' <O-GRAVE>
         DC    X'F3' <O-ACUTE>
         DC    X'F5' <O-TILDE>
         DC    X'7D' <RIGHT-BRACE>
         DC    X'4A' <J>
         DC    X'4B' <K>
         DC    X'4C' <L>
         DC    X'4D' <M>
         DC    X'4E' <N>
         DC    X'4F' <O>
         DC    X'50' <P>
         DC    X'51' <Q>
         DC    X'52' <R>
         DC    X'B9' <ONE-SUPERIOR>
         DC    X'FB' <U-CIRCUMFLEX>
         DC    X'FC' <U-DIAERESIS>
         DC    X'F9' <U-GRAVE>
         DC    X'FA' <U-ACUTE>
         DC    X'FF' <Y-DIAERESIS>
         DC    X'5C' <BACKSLASH>
         DC    X'F7' <DIVIDE>
         DC    X'53' <S>
         DC    X'54' <T>
         DC    X'55' <U>
         DC    X'56' <V>
         DC    X'57' <W>
         DC    X'58' <X>
         DC    X'59' <Y>
         DC    X'5A' <Z>
         DC    X'B2' <TWO-SUPERIOR>
         DC    X'D4' <O-CIRCUMFLEX>
         DC    X'D6' <O-DIAERESIS>
         DC    X'D2' <O-GRAVE>
         DC    X'D3' <O-ACUTE>
         DC    X'D5' <O-TILDE>
         DC    X'30' <ZERO>
         DC    X'31' <ONE>
         DC    X'32' <TWO>
         DC    X'33' <THREE>
         DC    X'34' <FOUR>
         DC    X'35' <FIVE>
         DC    X'36' <SIX>
         DC    X'37' <SEVEN>
         DC    X'38' <EIGHT>
         DC    X'39' <NINE>
         DC    X'B3' <THREE-SUPERIOR>
         DC    X'DB' <U-CIRCUMFLEX>
         DC    X'DC' <U-DIAERESIS>
         DC    X'D9' <U-GRAVE>
         DC    X'DA' <U-ACUTE>
         DC    X'9F' <EO>
CNVBIN   DC    X'00010203040506070809000000000000'
         DC    X'0A0B0C0D0E0F10111213000000000000'
         DC    X'1415161718191A1B1C1D000000000000'
         DC    X'1E1F2021222324252627000000000000'
         DC    X'28292A2B2C2D2E2F3031000000000000'
         DC    X'32333435363738393A3B000000000000'
         DC    X'3C3D3E3F404142434445000000000000'
HUFFLLEN DC    288AL1(*-*) fixed huffman codes literal/len table
* 000-143 8 bits codes 00110000-10111111
* 144-255 9 bits codes 110010000-111111111 built table missing leftbit
* 256-279 7 bits codes 0000000-0010111
* 280-287 8 bits codes 11000000-11000111
LENTABLE DC    A(257,0,3,3) code, xtrabits, minlen, maxlen
         DC    AL4(258,0,4,4) code, xtrabits, minlen, maxlen
         DC    AL4(259,0,5,5) code, xtrabits, minlen, maxlen
         DC    AL4(260,0,6,6) code, xtrabits, minlen, maxlen
         DC    AL4(261,0,7,7) code, xtrabits, minlen, maxlen
         DC    AL4(262,0,8,8) code, xtrabits, minlen, maxlen
         DC    AL4(263,0,9,9) code, xtrabits, minlen, maxlen
         DC    AL4(264,0,10,10) code, xtrabits, minlen, maxlen
         DC    AL4(265,1,11,12) code, xtrabits, minlen, maxlen
         DC    AL4(266,1,13,14) code, xtrabits, minlen, maxlen
         DC    AL4(267,1,15,16) code, xtrabits, minlen, maxlen
         DC    AL4(268,1,17,18) code, xtrabits, minlen, maxlen
         DC    AL4(269,2,19,22) code, xtrabits, minlen, maxlen
         DC    AL4(270,2,23,26) code, xtrabits, minlen, maxlen
         DC    AL4(271,2,27,30) code, xtrabits, minlen, maxlen
         DC    AL4(272,2,31,34) code, xtrabits, minlen, maxlen
         DC    AL4(273,3,35,42) code, xtrabits, minlen, maxlen
         DC    AL4(274,3,43,50) code, xtrabits, minlen, maxlen
         DC    AL4(275,3,51,58) code, xtrabits, minlen, maxlen
         DC    AL4(276,3,59,66) code, xtrabits, minlen, maxlen
         DC    AL4(277,4,67,82) code, xtrabits, minlen, maxlen
         DC    AL4(278,4,83,98) code, xtrabits, minlen, maxlen
         DC    AL4(279,4,99,114) code, xtrabits, minlen, maxlen
         DC    AL4(280,4,115,130) code, xtrabits, minlen, maxlen
         DC    AL4(281,5,131,162) code, xtrabits, minlen, maxlen
         DC    AL4(282,5,163,194) code, xtrabits, minlen, maxlen
         DC    AL4(283,5,195,226) code, xtrabits, minlen, maxlen
         DC    AL4(284,5,227,257) code, xtrabits, minlen, maxlen
         DC    AL4(285,0,258,258) code, xtrabits, minlen, maxlen
* 5 bit distance codes 0-29 with 5 bits in reversed order
DSTTABLE DC    AL4(0,0,1,1) code, xtrabits, mindist, maxdist
         DC    AL4(16,0,2,2) code, xtrabits, mindist, maxdist
         DC    AL4(8,0,3,3) code, xtrabits, mindist, maxdist
         DC    AL4(24,0,4,4) code, xtrabits, mindist, maxdist
         DC    AL4(4,1,5,6) code, xtrabits, mindist, maxdist
         DC    AL4(20,1,7,8) code, xtrabits, mindist, maxdist
         DC    AL4(12,2,9,12) code, xtrabits, mindist, maxdist
         DC    AL4(28,2,13,16) code, xtrabits, mindist, maxdist
         DC    AL4(2,3,17,24) code, xtrabits, mindist, maxdist
         DC    AL4(18,3,25,32) code, xtrabits, mindist, maxdist
         DC    AL4(10,4,33,48) code, xtrabits, mindist, maxdist
         DC    AL4(26,4,49,64) code, xtrabits, mindist, maxdist
         DC    AL4(6,5,65,96) code, xtrabits, mindist, maxdist
         DC    AL4(22,5,97,128) code, xtrabits, mindist, maxdist
         DC    AL4(14,6,129,192) code, xtrabits, mindist, maxdist
         DC    AL4(30,6,193,256) code, xtrabits, mindist, maxdist
         DC    AL4(1,7,257,384) code, xtrabits, mindist, maxdist
         DC    AL4(17,7,385,512) code, xtrabits, mindist, maxdist
         DC    AL4(9,8,513,768) code, xtrabits, mindist, maxdist
         DC    AL4(25,8,769,1024) code, xtrabits, mindist, maxdist
         DC    AL4(5,9,1025,1536) code, xtrabits, mindist, maxdist
         DC    AL4(21,9,1537,2048) code, xtrabits, mindist, maxdist
         DC    AL4(13,10,2049,3072) code, xtrabits, mindist, maxdist
         DC    AL4(29,10,3073,4096) code, xtrabits, mindist, maxdist
         DC    AL4(3,11,4097,6144) code, xtrabits, mindist, maxdist
         DC    AL4(19,11,6145,8192) code, xtrabits, mindist, maxdist
         DC    AL4(11,12,8193,12288) code, xtrabits, mindist, maxdist
         DC    AL4(27,12,12289,16384) code, xtrabits, mindist, maxdist
         DC    AL4(7,13,16385,24576) code, xtrabits, mindist, maxdist
         DC    AL4(23,13,24577,32768) code, xtrabits, mindist, maxdist
INAREA   DS    258C' ' report input area
INAREA2  DS    1024C' ' report input area with duplicate strings
BLNKDUPL DC    258A(*-*) offsets to last blank dupl with specified len
DASHDUPL DC    258A(*-*) offsets to last dash  dupl with specified len
STARDUPL DC    258A(*-*) offsets to last star  dupl with specified len
EQULDUPL DC    258A(*-*) offsets to last =     dupl with specified len
ZERODUPL DC    258A(*-*) offsets to last zero  dupl with specified len
HBARDUPL DC    258A(*-*) offsets to last horzbar xbf-->xc4
*NAPDCB DCB DDNAME=SNAP,RECFM=VBA,MACRF=(W),LRECL=125,BLKSIZE=1632,    X
               DSORG=PS
         BPXYOPNF
         BPXYFTYP
         BPXYMODE
         PRINT NOGEN
         DCBD  DSORG=PS
XDIRMAP  DSECT ,
XFILETIM DS    2X file time
XFILEDTE DS    2X file date
XFILECRC DS    4X file crc-32
XFILECMP DS    4X compressed size
XFILEUCP DS    4X uncompressed size
XFILELFO DS    4X local file hdr offset
XFILENLN DS    2X file name len
XFILEFNC DS    0X variable file name
         END
/*
//L.SYSLIB   DD  DSN=SYS1.CSSLIB,DISP=SHR <== required
//L.SYSLMOD  DD  DSN=xxxxxxxxxxxxx.LOADLIB(ZIPPER),DISP=SHR
